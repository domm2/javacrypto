/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import auth.token.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import crypto.Utils;

public class Driver {


    public static void printUsage(){
        
        String format = "%-30s %5s\n";
        System.out.println("Usage driver:");
        System.out.format(format, "switch username privatekeyfile", "Change to a different user");
        System.out.format(format, "cuser  username", "Create a user (requires admin privileges)");
        System.out.format(format, "duser username", "Delete a user (requires admin privileges)");
        System.out.format(format, "cgroup groupName", "Create a group");
        System.out.format(format, "dgroup groupName", "Delete a group (must be owner)");
        System.out.format(format, "auserg user groupName", "Add user to group (must be owner)");
        System.out.format(format, "duserg user groupName", "Delete a user from a group (must be owner)");
        System.out.format(format, "listm groupName", "List members of a group (must be owner)");
        System.out.format(format, "listf", "List files that are allowed to be seen");
        System.out.format(format, "upload src dest group", "Upload a file to group (uploader must be member of group)");
        System.out.format(format, "download src dest", "Download a file from the server (downloader must be part of group)");
        System.out.format(format, "delete src", "Delete a file from the server (must be member of group)");
        System.out.format(format, "discon", "Disconnect from the server");
    }

    public static void main(String[] args) throws Exception{
        BufferedReader reader = new BufferedReader(
            new InputStreamReader(System.in));

        String current_user = "";
        String current_user_key = "";
        String fkeypath = "";
        String[] split;

        if(args.length < 4){
        System.out.println("Invalid arguments: expected FILE_SERVER_IP FILE_SERVER_PORT"
                    + " GROUP_SERVER_IP GROUP_SERVER_PORT");
            printUsage();
        }

        GroupClient g = new GroupClient();
        g.connect(args[2], Integer.parseInt(args[3]));

        FileClient f = new FileClient();
        f.connect(args[0], Integer.parseInt(args[1]));

        UserToken a = null;
        System.out.println("Enter username and privatekey file name.");

        System.out.print(">");
        String command = "";
        try{
            command = reader.readLine();
            split = command.split("\\s+");
            current_user = split[0];
            current_user_key = "../../../" + split[1];
        }catch (IOException e){
            System.out.println("ERROR: FAILED TO READ LINE");
        }


        /* challenge the file server */
        System.out.println("Enter file server public key path.");
        System.out.print(">");
        try{
            fkeypath = reader.readLine();
        }catch(IOException e){
            
        }

        try{
            UserToken x = g.getToken(current_user, Utils.loadByteArr(current_user_key) , "../../../" + fkeypath);
            if(x != null){
                a = x;
                System.out.println("Switching to user " + x.getSubject());
            }else{
                System.out.println("User " + current_user + " does not exist exitting...");
                System.exit(-1);
            }


            if(f.challenge("../../../" + fkeypath, current_user, Utils.loadByteArr(current_user_key))){
                System.out.println("FILE SERVER IS TRUSTED");
            }else{
                System.out.println("FILE SERVER CAN'T BE TRUSTED");
            }
        }catch(Exception e){
            System.out.println("Failed to read file server key path.");
            System.exit(-1);
        }


        /* Handle cmdline options here 
         * cmdline is used to do manual testing */
        boolean run = true;

        while(run){
            System.out.print(">");
            command = "";
            try{
                command = reader.readLine();
            }catch (IOException e){
                System.out.println("ERROR: FAILED TO READ LINE");
            }
            split = command.split("\\s+");

            a = g.getToken(current_user, Utils.loadByteArr(current_user_key), "../../../" + fkeypath);
            
            switch(split[0]){
                case "switch":
                    UserToken t = g.getToken(split[1], Utils.loadByteArr("../../../" + split[2]),"../../../" + fkeypath);
                    if(t != null){
                        a = t;
                        System.out.println("Switching to user " + t.getSubject());
                        current_user = split[1];
                        current_user_key = "../../../" + split[2];
                    }else{
                        System.out.println("User " + split[1] + " does not exist");
                    }
                    break;
                
                case "cuser":
                    if(!g.createUser(split[1], a)){
                        System.out.println("Failed to create user.");
                    }
                    break;

                case "duser":
                    if(!g.deleteUser(split[1], a)){
                        System.out.println("Failed to delete user");
                    }
                    break;

                case "cgroup":
                    if(!g.createGroup(split[1], a)){
                        System.out.println("Failed to create group");
                    }
                    break;

                case "dgroup":
                    if(!g.deleteGroup(split[1], a)){
                        System.out.println("Failed to delete group");
                    }
                    break;

                case "auserg":
                    if(!g.addUserToGroup(split[1], split[2], a)){
                        System.out.println("Failed to add user to group");
                    }
                    break;

                case "duserg":
                    if(!g.deleteUserFromGroup(split[1], split[2], a)){
                        System.out.println("Failed to delete user from group");
                    }
                    break;

                case "listm":
                    List<String> m = g.listMembers(split[1], a);
                    if(m == null){
                        System.out.println("There are no users in this group");
                    }else{
                        for(String member : m){
                            System.out.println(member);
                        }
                    }
                    break;
                
                case "getk":
                    g.getKey(split[1], a);
                    break;

                case "listf":
                    List<String> files = f.listFiles(a);
                    for(String s : files){
                        System.out.println(s);
                    }
                    break;

                case "upload":
                    /* Get current file key */
                    g.getKey(split[3], a); 
                    if(!f.upload(split[1], split[2], split[3], a, g.filekey, g.n)){
                        System.out.println("Failed to upload file\n");
                    }
                    break;

                case "download":
                    /* Get current file key */
                    g.getKey(split[3], a); 
                    if(!f.download(split[1], split[2], a, g.filekey, g.n)){
                        System.out.println("Failed to download file\n");
                    }
                    break;

                case "delete":
                    if(!f.delete(split[1], a)){
                        System.out.println("Failed to delete file\n");
                    }
                    break;
                case "discon":
                    System.out.println("Disconnecting from server....\n");
                    f.disconnect();
                    g.disconnect();
                    System.out.println("Disconnected!");
                    System.exit(0);
                    break;
                case "help":
                    printUsage();
                    break;
                default:
                    System.out.println("Invalid command argument see help\n");
                    break;
            }

        }
    }
}
